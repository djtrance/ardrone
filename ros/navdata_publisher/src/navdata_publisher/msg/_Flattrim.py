"""autogenerated by genmsg_py from Flattrim.msg. Do not edit."""
import roslib.message
import struct


class Flattrim(roslib.message.Message):
  _md5sum = "592e1961e0235e956ee622a1c9644431"
  _type = "navdata_publisher/Flattrim"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32[3] accs_offset     
float32[3] accs_gains
float32[3] gyros_offset    
float32[3] gyros_gains 
float32[3] gyros110_offset  
float32[3] gyros110_gains

"""
  __slots__ = ['accs_offset','accs_gains','gyros_offset','gyros_gains','gyros110_offset','gyros110_gains']
  _slot_types = ['float32[3]','float32[3]','float32[3]','float32[3]','float32[3]','float32[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       accs_offset,accs_gains,gyros_offset,gyros_gains,gyros110_offset,gyros110_gains
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Flattrim, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.accs_offset is None:
        self.accs_offset = [0.,0.,0.]
      if self.accs_gains is None:
        self.accs_gains = [0.,0.,0.]
      if self.gyros_offset is None:
        self.gyros_offset = [0.,0.,0.]
      if self.gyros_gains is None:
        self.gyros_gains = [0.,0.,0.]
      if self.gyros110_offset is None:
        self.gyros110_offset = [0.,0.,0.]
      if self.gyros110_gains is None:
        self.gyros110_gains = [0.,0.,0.]
    else:
      self.accs_offset = [0.,0.,0.]
      self.accs_gains = [0.,0.,0.]
      self.gyros_offset = [0.,0.,0.]
      self.gyros_gains = [0.,0.,0.]
      self.gyros110_offset = [0.,0.,0.]
      self.gyros110_gains = [0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_3f.pack(*self.accs_offset))
      buff.write(_struct_3f.pack(*self.accs_gains))
      buff.write(_struct_3f.pack(*self.gyros_offset))
      buff.write(_struct_3f.pack(*self.gyros_gains))
      buff.write(_struct_3f.pack(*self.gyros110_offset))
      buff.write(_struct_3f.pack(*self.gyros110_gains))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 12
      self.accs_offset = _struct_3f.unpack(str[start:end])
      start = end
      end += 12
      self.accs_gains = _struct_3f.unpack(str[start:end])
      start = end
      end += 12
      self.gyros_offset = _struct_3f.unpack(str[start:end])
      start = end
      end += 12
      self.gyros_gains = _struct_3f.unpack(str[start:end])
      start = end
      end += 12
      self.gyros110_offset = _struct_3f.unpack(str[start:end])
      start = end
      end += 12
      self.gyros110_gains = _struct_3f.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(self.accs_offset.tostring())
      buff.write(self.accs_gains.tostring())
      buff.write(self.gyros_offset.tostring())
      buff.write(self.gyros_gains.tostring())
      buff.write(self.gyros110_offset.tostring())
      buff.write(self.gyros110_gains.tostring())
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 12
      self.accs_offset = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.accs_gains = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.gyros_offset = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.gyros_gains = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.gyros110_offset = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.gyros110_gains = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3f = struct.Struct("<3f")
